4. DML - SELECT-2
- 1. 일반 형식
  = 1. 그룹함수 -> GROUP BY 절에 지정된 그룹별로 속성의 값을 집계할 함수
  = 2. WINDOW 함수
    -> 1. GROUP BY 절을 이용하지 않고 속성의 값을 집계할 함수
    -> 2. PARTITION BY => WINDOW 함수의 적용 범위가 될 속성 집계
    -> 3. ORDER BY => PARTITION 안에서 정렬 기준으로 사용할 속성 지정

  = 3. GROUP BY 절 -> 특정 속성 기준으로 그룹화하여 검색할 때 사용
  = 4. HAVING 절 -> GROUP BY 와 함께 사용, 그룹에 대한 조건 지정

- 2. 그룹 함수 
  <GroupBy 절은 그룹별 통계정보 제공>
  <OrderBy 절은 조회된 자료 정리하는것>
  = 1. GROUP BY 절에 지정된 그룹별로, 속성의 값 집계할 떄 사용
  = 2. COUNT (속성명) -> 그룹별 튜플 수
  = 3. SUM (속성명) -> 그룹별 합계
  = 4. AVG (속성명) -> 그룹별 평균
  = 5. MAX (속성명) -> 그룹별 최대값
  = 6. MIN (속성명) -> 그룹별 최소값
  = 7. STDDEV (속성명) -> 그룹별 표준편차
  = 8. VARIANCE (속성명) -> 그룹별 분산
  = 9. ROLLUP (속성명, 속성명, ...) -> 그룹별 소계, 인수, n, n+1, 하위 -> 상위 레벨
  = 10. CUBE (속성명, 속성명, ...) -> 그룹별 소계, 인수, 모든조합, n, 2*n, 상위 -> 하위 레벨

- 3. WINDOW 함수
  = 1. GROUP BY 이용 X, 함수의 인자로 지정한 속성의 값 집계
  = 2. WINDOW 정의 -> 함수의 인수로 지정한 속성이 집계할 범위
  = 3. ROW_NUMBER() -> 윈도우별로 각 Record 에 대한 일련번호 반환
  = 4. RANK() -> 윈도우별로 순위 반환, 공동 순위 반영
  = 5. DENSE_RANK() -> 윈도우별로 순위 반환, 공동 순위 무시, 순위 부여

- 4. WINDOW 함수 이용 검색
  = 1. GROUP BY 절을 이용하지 않고 함수의 인수로 지정한 속성을 범위로 하여 속성의 값 집계
  = 2. 예시 (Window 함수 이용 검색 1)
    -> 1. 상여금 테이블에서 '상여내역'별로 '상여금'에 대한 일련 번호를 구하시오.
    -> 2. (단 순서는 내림차순이며 속성명은 'NO'로 할 것)
    -> 3. SELECT 상여내역, 상여금, 
          ROW_NUMBER() OVER (PARTITION BY 상여내역 ORDER BY 상여금 DESC) AS NO
          FROM 상여금

  = 3. 예시 (Window 함수 이용 검색 2)
    -> 1. SELECT 상여내역, 상여금,
	  RANK() OVER (PARTITION BY 상여내역 ORDER BY 상여금 DESC) AS 상여금순위
          FROM 상여금;

- 5. 그룹 지정 검색
  = 1. GROUP BY 절에 지정한 속성을 기준으로 자료 그룹화하여 검색
  = 2. 예시 (Windows 그룹 지정 검색, AVG)
    -> 1. 상여금 테이블에서 '부서'별 '상여금'의 평균
    -> 2. SELECT 부서, AVG(상여금) AS 평균 GROUP BY 부서;

  = 3. 예시 (Windows 그룹 지정 검색, COUNT)
    -> 1. 상여금 테이블에서 '상여금'이 100 이상인 사원이 2명 이상인 '부서'의 튜플 수
    -> 2. SELECT 부서, COUNT(*) AS 사원수 FROM 상여금
	  WHERE 상여금 >= 100
	  GROUP BY 부서
	  HAVING COUNT(*) >= 2

  = 4. 예시 (Windows 그룹 지정 검색, SUM & ROLLUP)
    -> 1. 상여금 테이블의 '부서','상여내역'
    -> 2. '상여금'에 대해 부서별 상여내역별 소계와 전체 합계 검색
    -> 3. 속성명 = '상여금합계', ROLLUP 함수 사용
    -> 4. SELECT 부서,상여내역, SUM(상여금) AS 상여금합계
	  FROM 상여금
	  GROUP BY ROLLUP(부서, 상여내역);

  = 5. 예시 (Windows 그룹 지정 검색, SUM, GROUP BE CUBE
    -> 1. 상여금 테이블의 '부서', '상아내역', '상여금`에 대해 부서별 상이내역별 소계와 전체 합계 검색
    -> 2. (속성명= '상여금 합계', 'CUBE 함수' 사용)
    -> 3. SELECT 부서, SUM(상여금) AS 상여금합계 FROM 상여금
	  GROUP BY CUBE(부서, 사용내역)

- 6. 집합 연산자를 활용한 통합 질의
  = 1. 집합 연산자 사용, 2개 이상의 Table 의 데이터를 하나로 변경
  = 2. SELECT 속성명1, 속성명2, ... FROM 테이블명
       UNION | UNION ALL | INTERSECT | EXCEPT
       FROM 테이블명
       [ORDER BY 속성명 [ASC | DESC]);

  = 3. 두 개의 SELECT 문, 기술한 속성 -> 개수 & 데이터 유형 서로 동일해야 함
  = 4. 집합 연산자의 종류 (통합 질의의 종류)
    -> 1. UNION => 두 SELECT문 조회결과 통합, 중복된 행은 한 번만 출력 (합집합)
    -> 2. UNION ALL => 두 SELECT 문 조회결화 통합, 중복된 행도 그대로 출력 (합집합)
    -> 3. INTERSECT => 두 SELECT 문의 조회 결과 중, 공통된 행만 출력 (교집합)
    -> 4. EXCEPT => 첫 SELECT 문 조회결과, 두번째 SELECT 문 조회결과 제외 행 출력
    -> 5. 예시 (UNION)
       => 1. 사원 테이블과 직원 테이블을 통합하는 질의문을 만들시오.
       => 2. SELECT * FROM 사원 UNION SELECT * FROM 직원;

    -> 6. 예시 (INTERSECT)
      => 1. 사원 테이블과 직원 테이블에 공통으로 존재하는 레코드만 통합하는 질의
      => 2 SELECT * FROM 사원 INTERSECT SELECT * FROM 직원;
