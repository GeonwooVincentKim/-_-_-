6. 테스트 케이스 / 테스트 시나리오 / 테스트 오라클
- 1. 테스트 케이스 (TestCase)
  = 1. 소프트웨어, 사용자 요구사항 정확, 준수했는지 확인, 테스트 항목에 대한 명세서
  = 2. ISO / IEC / 29119-3
    -> 1. 식별자 (Identifier) => 항목 식별자, 일련번호
    -> 2. 테스트 항목 (Test Item) => 테스트 대상 (모듈 또는 기능)
    -> 3. 입력 명세 (Input Specification) => 입력 데이터 또는 테스트 조건
    -> 4. 출력 명세 (Output Specification) => TestCase 수행 시, 예상되는 출력 결과
    -> 5. 환경 설정 (Environmental Needs) => 필요한 H/W 나 S/W 환경
    -> 6. 특수 절차 요구 (Special Procedure Requirement)
       => TestCase 수행 시, 특별히 요구되는 절차

    -> 7. 의존성 기술 (Inter-case Dependencies) => TestCase 간의 의존성

- 2. 테스트 시나리오 (Test Scenario)
  = 1. TestCase 를 적용하는 순서에 따라 여러 개의 TestCase 묶은 집합
  = 2. TestCase 적용하는 구체적인 절차 명세, 사전 조건, 입력 데이터 설정

- 3. 테스트 오라클 (Test Oracle)
  = 1. Test 결과 올바른지 판단하기 위해 사전에 정의된 참 값 대입, 비교하는 기법
  = 2. 특징
    -> 1. 제한된 검증 => Test Oracle 은 모든 TestCase 적용 불가
    -> 2. 수학적 기법 => Test Oracle 값을 수학적 기법을 이용하여 구할 수 있음
    -> 3. 자동화 기능 => Test 대상 프로그램 실행, 결과 비교, 커버리지 측정 자동화 O

- 4. 테스트 오라클 종류
  = 1. 참(True) 오라클 -> 모든 TestCase 입력 값 기대 결과 제공, 발생된 모든 오루 검출
  = 2. 샘플링 (Sampling) 오라클 
    -> 특정 TestCase 입력 값들만 기대 결과 제공, 전수 테스트 불가능한 경우 사용
  
  = 3. 추정(Heuristic) 오라클 
    -> 특정 TestCase 입력 값 기대 결과 제공, 나머지 입력 값들은 추정으로 처리

  = 4. 일관성 검사(Consistent) 오라클
    -> Application 변경, TestCase 의 수행 전과 후 결과 값 동일한지 확인


7. 테스트 자동화 도구
- 1. 테스트 자동화
  = 1. 반복적 수행하던 테스트 절차를 자동화 도구 적용, 쉽고 효율적으로 테스트 수행
  = 2. 테스트 유형에 따른 테스트 자동화 도구의 종류
    -> 정적 분석, 테스트 실행, 성능 테스트, 테스트 통제

- 2. 정적 분석 도구 (Static Analysis Tools)
  = 프로그램을 실행하지 않고 분석하는 도구, 소스 코드, 코딩 표준, 스타일, 복잡도

- 3. 테스트 실행 도구 (Test Execution Tools)
  = 1. 스크립트 언어를 사용하여 Test 실행하는 도구
  = 2. 데이터 주도 접근 방식 -> TestData 저장, 읽어서 실행하는 방식
  = 3. 키워드 주도 접근 방식 -> Test 수행 동작 나타내는 키워드, TestData 저장 실행

- 4. 성능 테스트 도구 (Performance Test Tools)
  = 가상 사용자를 만들어 테스트를 수행함으로써, 성능 목표 달성 여부 확인하는 도구

- 5. 테스트 통제 도구 (Test Control Tools)
  = 1. 테스트 계획 및 관리, 테스트 수행, 결함 관리 수행하는 도구
  = 2. 형상 관리 도구, 결함 추적/관리 도구

- 6. 테스트 하네스 도구 (Test Harness Tools)
  = 1. 테스트 실행될 환경을 시뮬레이션, 컴포넌트 및 모듈 정상 테스트되도록 하는 도구
  = 2. 테스트 하네스
    -> 1. App 컴포넌트 및 모듈 테스트하는 환경 일부분
    -> 2. 테스트 지원하기 위해 생성된 코드와 데이터 의미

- 7. 테스트 하네스 구성 요소
  = 1. 테스트 드라이버 -> 하위 모듈 호출, 파라미터 전달, 모듈 테스트 수행 결과 도출
  = 2. 테스트 스텁 -> 제어 모듈 호출, 타 모듈 기능 단순 수행, 일시적 필요 조건 지님
  = 3. 테스트 슈트 -> 테스트 대상 컴포넌트나 모듈, 시스템에 사용되는 TestCase 집합
  = 4. 테스트 케이스 -> 사용자 요구사항 정확 준수, 테스트 항목의 명세서
  = 5. 테스트 스크립트 -> 자동화된 테스트 실행 절차에 대한 명세서
  = 6. 목 오브젝트 -> 사전에 사용자 행위 조건부 입력, 상황에 맞는 예정된 행위 수행

- 8. 테스트 수행 단계별 테스트 자동화 도구
  = 1. 테스트 계획 - 요구사항 관리 - 사용자 요구사항 정의 및 변경 사항 관리
  = 2. 테스트 분석/설계 - TestCase 생성 - TestData 및 TestCase 작성 지원 도구
  = 3. 테스트 수행 - 테스트 자동화 - Test 자동화 도와주는 도수, 효율성 증대
  = 4. 테스트 수행 - 정적 분석 - 코딩 표준, 런타임 오류 검증하는 도구
  = 5. 테스트 수행 - 동적 분석 - 대상 시스템 시뮬레이션, 오류 검출
  = 6. 테스트 수행 - 성능 테스트 - 가상 사용자 생성, 시스템 처리 능력 측정
  = 7. 테스트 수행 - 모니터링 - CPU, Memory 시스템 자원 상태 확인 및 분석 지원 도구
  = 8. 테스트 관리 - 커버리지 분석 - 테스트 완료 후 테스트 충분성 여부 검증 지원
  = 9. 테스트 관리 - 형상 관리 - 테스트 수행, 필요한 다양한 도구 및 데이터 관리 도구
  = 10. 테스트 관리 - 결함 추적/관리 - 발생한 결함 추적 및 관리 활동 지원하는 도구


8. 결함 관리
- 1. 결함 (Fault)
  = S/W 가 개발자가 설계한 것과 다르게 동작, 다른 결과 발생되는 것

- 2. 결함 프로세스
  = 1. 결함 관리 계획
  = 2. 결함 기록
  = 3. 결함 검토
  = 4. 결함 수정
  = 5. 결함 재확인
  = 6. 결함 상태 추적 및 모니터링 활동
  = 7. 최종 결함 분석 및 보고서 작성

- 3. 결함 상태 추적
  = 1. 테스트에서 발견된 결함은 지속적으로 상태 변화 추적 및 관리
  = 2. 발견된 결함에 대해 결함 관리 측정 지표, 속성 값들을 분석
  = 3. 향후 결함이 발견될 모듈 또는 컴포넌트 추정 가능
  = 4. 결함 관리 측정 지표
    -> 1. 결함 분포 => 모듈, 컴포넌트 특징 속성에 해당하는 결함 수 측정
    -> 2. 결함 추세 => Test 진행 시간에 따른 결함 수의 추이 분석
    -> 3. 결함 에이징 => 특정 결함 상태로 지속되는 시간 측정

- 4. 결함 추적 순서
  = 1. 결함 등록 (Open)
  = 2. 결함 검토 (Reviewed)
  = 3. 결함 할당 (Assigned)
  = 4. 결함 수정 (Resolved)
  = 5. 결함 조치 보류 (Deferred)
  = 6. 결함 종료 (Closed)
  = 7. 결함 해제 (Clarified)

- 5. 결함 분류
  = 1. 시스템 결함 -> 애플리케이션 환경, DB 처리에서 발생된 결함
  = 2. 기능 결함 -> 애플리케이션 기획, 설계, 업무 시나리오 단계에서 유입된 결함
  = 3. GUI 결함 -> 사용자 화면 설계에서 발생된 결함
  = 4. 문서 결함 -> 기획자, 사용자, 개발자 간 의사소통 및 기록 원할 X, 발생된 결함

- 6. 결함 심각도
  = 1. 애플리케이션에 발생한 결함이 전체 시스템에 미치는 치명도를 나타내는 척도
  = 2. High, Medium, Low 또는 치명적, 주요, 보통, 경미, 단순으로 나타냄

- 7. 결함 우선순위
  = 1. 발견된 결함 처리에 신속성을 나타내는 척도
  = 2. 결함 중요도, 심각도에 따라 설정, 수정 여부 결정

- 8. 결함 관리 도구
  = 1. Mantis -> 결함 및 이슈 관리 도구, S/W 설계 시 단위별 작업 내용 기록
  = 2. Trac -> 결함 추적 & 결함 통합 관리
  = 3. Redmine -> 프로젝트 관리 및 결함 추적 가능
  = 4. Bugzilla -> 결함 신고, 확인, 처리 등 결함 지속적 관리가능한 도구


9. 애플리케이션 성능 개선
- 1. 소스 코드 최적화
  = 1. 나쁜 코드를 배제하고, 클린 코드로 작성하는 것
  = 2. 클린 코드 -> 누구나 쉽게 이해, 수정 및 추가, 단순 명료, 잘 작성된 코드
  = 3. 나쁜 코드 
    -> 1. 프로그램 로직 복잡하고 이해하기 어려운 코드
    -> 2. 스파게티 코드 => 코드 로직이 서로 복잡하게 얽혀 있는 코드
    -> 3. 외계인 코드 => 아주 오래되거나 참고문서 또는 개발자가 없어 유지보수 힘듬

- 2. 클린 코드 작성 원칙
  = 1. 가독성 -> 코드 쉽게 읽을 수 있도록 작성, 이해하기 쉬운 용어 사용, 들여쓰기
  = 2. 단순성 
    -> 1. 코드 간단하게 작성, 한 번에 한 가지 처리하는 코드 작성, 
    -> 2. 클래스/메소드/함수 최소 단위 분리

  = 3. 의존성 배제
    -> 1. 코드가 다른 모듈에 미치는 영향 최소화
    -> 2. 코드 변경 시 다른 부분에 영향 없도록 작성
  
  = 4. 중복성 최소화 -> 코드 중복 최소화 & 중복된 코드 삭제, 공통된 코드 사용
  = 5. 추상화 
    -> 1. 상위 클래스/메소드/함수를 간략하게 App 특성 나타내기
    -> 2. 상세 내용은 하위 클래스/메소드/함수에서 구현

- 3. 소스 코드 최적화 유형
  = 1. 클래스 분할 배치 
    -> 하나의 클래스는 하나의 역할만 수행, 응집도 높임, 크기를 작게 작성

  = 2. 느슨한 결합 (Loosely Coupled)
    -> 인터페이스 클래스 이용, 추상화된 자료 구조, 메소드 구현, 클래스 의존성 최소화

- 4. 소스 코드 품질 분석 도구
  = 1. 코딩 스타일, 코드 표준, 코드 복잡도, 메모리 누수 현상
  = 2. 스레드 결함 등을 발견하기 위해 사용하는 분석 도구
  = 3. 정적 분석 도구
    -> 1. 소스 코드 실행 X, 코딩 표준, 코딩 스타일, 결함 확인하는 코드 분석 도구
    -> 2. pmd, cppcheck, SonarQube, checkstyle, ccm, cobertura

  = 4. 동적 분석 도구
    -> 1. 소스 코드 실행 O, 메모리 누수, 스레드 결함 분석하는 도구
    -> 2. Avalanche, Valgrind

- 5. 소스 코드 품질 분석 도구의 종류
  = 1. pmd - 미사용 변수, 최적화 X, 결함 유발 코드 검사 -> Linux, Windows
  = 2. cppcheck - C/C++ 메모리 누수, 오버플로우 -> Windows
  = 3. SonarQube - 중복 코드, 복잡도, 코딩 설계, 분석 통합 플랫폼 -> Cross-Platform
  = 4. checkstyle - 자바 코드, 코드 표준, 다양한 개발 도구 통합사용 -> Cross-Platform
  = 5. com - 다양한 언어 코드 복잡도 분석 -> Cross-Platform
  = 6. cobertura - Java, 소스 코드 복잡도, 테스트 커버리지 -> Cross-Platform
  = 7. Avalanche - Valgrind Framework, STP 기반, 결함, 취약점 -> Linux, Windows
  = 8. Valgrind - 메모리 및 쓰레드 결함 분석 -> Cross-Platform