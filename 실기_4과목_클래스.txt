1. C++ 생성자 뜻
- 객체변수를 생성하면서 초기화를 수행하는 메소드


2. 헝가리안 표기법
- 변수명 작성 시 변수의 자료형을 알 수 있도록 자료형을 의미하는 문자열을 포함하여 작성하는 방법


3. 우선 순위
- 단항 -> 산술 -> 시프트 -> 관계 -> 비트 -> 논리 -> 조건 -> 대입 -> 순서


4. 파이썬 (List) - 예제

a = ['abc123', 'def456', 'ghi789']
print(a[1][-3:], a[2][:-3], sep=',')

-> 1. a[1] = 'def456'
-> 2. [-3:] 
   => 1. List 의 -3 위치부터 (왼쪽으로 3칸 이동한 인덱스부터) 마지막 요소까지 추출
   => 2. 456

-> 3. a[2] = 'ghi789'
-> 4. [:-3]
   => 1. List 맨 처음 요소부터 -3 위치까지 (맨 끝에서 3칸만큼 이동한 인덱스까지) 추출


-> 5. range(0, 5)
   => 0, 1, 2, 3, 4


5. Slice
- 1. 슬라이스 -> 문자열이나 리스트와 같은 순차형 객체에서 일부를 잘라(slicing) 변환하는 기능
- 2. 형식
  -> 1. 객체명 [초기위치:최종위치] -> 초기위치 ~ 최종위치 - 1까지 요소 가져오기
  -> 2. 객체명 [초기위치:최종위치:증가값] -> 초기위치 ~ 최종위치 - 1까지 증가값만큼 증가하면서 해당 위치 요소들 가져오기

  -> 3. 객체명[:] 또는 객체명[::] -> 객체의 모든 요소 반환
  -> 4. 객체명 [초기위치:] -> 객체의 초기위치 ~ 마지막 위치까지의 요소들 반환
  -> 5. 객체명 [:최종위치] -> 객체 0번째 위치 ~ 최종위치 - 1까지의 요소들 반환
  -> 6. 객체명 [::증가값] -> 객체 0번째 위치 ~ 마지막 위치, 증가값만큼 증가, 해당 위치 요소들 반환

6. 리스트 extend() -> 리스트 끝에 새롱룬 리스트 추가 (append 와 비슷)
7. 세트 update(세트) -> 세트에 새로운 세트 추가 (append 와 비슷)


8. 절차적 프로그래밍 언어 
- 1. 일련의 처리 절차를 정해진 문법에 따라 순서대로 기술하는 언어
- 2. 자연어에 가까운 단어와 문장으로 구성
- 3. 프로시저
- 4. 종류
  = C (고급 + 저급), ALBOL (수치계산 & 논리연산), COBOL (사무처리용 언어), FORTRAN (과학 기술 계산용 언어)


9. 객체지향 프로그래밍 언어
- 1. 현실 세계의 개체를 하나의 객체로 만들어, 그 객체들을 조립해서 프로그램을 작성하는 기법
- 2. 명령과 데이터로 구성된 객체 중심
- 3. 종류
  = JAVA (분산 네트워크 환경), C++ (모든 문제 객체 모델링 표현), Smalltalk (1세대 객체지향 언어, 최초로 GUI 제공)


10. 스크립트 언어
- 1. HTML 문서 안에 직접 프로그래밍 언어를 삽입하여 사용하는 언어
- 2. 기계어로 컴파일 되지 않고, 별도 번역기가 소스 분석하여 동작
- 3. DB 처리 작업을 수행하기 위해 주로 사용
- 4. 분류
  = 1. 서버용 스크립트 언어 - ASP, JSP, PHP, 파이썬 -> 서버에서 해석되어 실행, 결과 클라이언트로 전송
  = 2. 클라이언트용 스크립트 언어 - JS, VB 스크립트 -> 클라이언트의 웹 브라우저에서 해석되어 실행

- 5. 종류
  = 1. JS - 웹 페이지 동작
  = 2. VB 스크립트 - MS사 개발, ActiveX 사용 -> MS사의 Application 들을 컨트롤 가능
  = 3. ASP(Active Server Page) - 서버 측에서 동적 수행 페이지 제작 가능 언어, MS사 제작, Windows 계열에서만 수행 가능
  = 4. JSP(Java Server Page) - Java Server Script 언어, 다양한 운영체제
  = 5. PHP(Professional Hypertext Preprocessor) - Linux, Unix, Windows 수행 가능한 서버 스크립트 언어, 웹페이지 제작
  = 6. 파이썬(Python) - 객체지향 기능 지원하는 인터프리터 언어, 독립적 플랫폼, 문법 간단
  = 7. 쉘 스크립트 - 유닉스/리눅스 계열 쉘, if case (선택형), for (반복형), while, until
  = 8. Basic - 절차지향 기능 지원, 대화형 인터프리터 언어, 초보자 쉽게 사용 가능한 문법 구조


11. 선언형 언어
- 1. 선언형 언어
  = 1. 프로그램이 수행해야 할 문제를 기술하는 언어
  = 2. 분류
    -> 1. 함수형 언어 => 수학적 함수 조합, 함수 적용, 재귀호출, LISP
    -> 2. 논리형 언어 => 기호 논리학, 논리 문장, 반복문 & 선택문 사용 X, PROLOG

- 2. 명령형 언어
  = 1. 문제 해결하기 위한 방법을 기술하는 언어
  = 2. 순차적인 명령 수행, 폰노이만 구조, FORTRAN, COBOL, C, Java

- 3. 선언형 언어 종류
  = 1. HTML -> Web HyperText 문서
  = 2. LISP -> 인공지능, 기본 자료 구조 = 연결 리스트, 재귀호출 많이 사용
  = 3. PROLOG -> 논리학, 고급 언어, 인공지능 => 논리적인 추론 & 리스트 처리
  = 4. XML -> HTML 단점 보완, 사용자 새로운 Tag 정의, 문서 내용 표현방식 독립적
  = 5. Haskell -> 함수형 프로그래밍 언어, 부작용 X, 코드 간결 & 에러 발생 가능성 낮음


12. 라이브러리
- 1. 자주 사용하는 함수나 데이터들을 미리 만들어 모아 놓은 집합체
- 2. 분류
  = 1. 표준 라이브러리 -> 프로그래밍 언어 기본 포함, 여러 종류 모듈이나 패키지 형태
  = 2. 외부 라이브러리 -> 개발자들이 필요한 기능들 만들어 인터넷 공유, 외부 라이브러리 다운받아 설치 후, 사용

- 3. C언어 대표적인 외부 라이브러리
  = 1. stdio.h -> 데이터 입출력, printf, scanf, fprintf, fscanf, fclose, fopen
  = 2. math.h -> 수학 함수, sqrt, pow, abs
  = 3. string.h -> 문자열 처리, strlen, strcpy, strcmpy
  = 4. stdlib.h -> 자료형 변환, 난수 발생, 메모리 할당, atoi, atof, srand, rand, malloc, free
  = 5. time.h -> 시간 처리, time, clock


- 4. Java 대표적인 외부 라이브러리
  = 1. java.lang -> 인터페이스, 자료형, 예외 처리, imort 문 없이 사용 가능, String, System, Process, Runtime, Math, Error
  = 2. java.util -> 날짜 처리, 난수 발생, 복잡한 문자열 처리, Date, Calendar, Random, StringTokenizer
  = 3. java,io -> 파일 입출력 & 프로토콜 제공, InputStream, OutputStream, Reader, Writer
  = 4. java.net -> 네트워크, Socker, URL, InetAddress
  = 5. java.awt -> 사용자 인터페이스 (UI), Frame, Panel, Dialog, Button, Checkbox

- 5. Python 대표적인 외부 라이브러리
  = 1. 내장 함수 -> 기본 인터페이스, import 나 class 명 없이 사용 가능, abs(), slice(), pow(), print()
  = 2. os -> 운영체제와 상호 작용, getcwd(), chdir(), system()
  = 3. re -> 고급 문자열 처리, findall(), sub()
  = 4. math -> 복잡한 수학 연산, cos(), log()
  = 5. random -> 무작위 선택, choice(), sample(), random(), randrange()
  = 6. statistics -> 통계값 산출, mean(), median(), variance()
  = 7. datetime -> 날짜와 시간 조작, today(), date(), strftime()
