VII. 애플리케이션 배포

1. 소프트웨어 패키징
- 1. 소프트웨어 패키징
  = 1. 모듈별로 생성한 실행 파일들을 묶어 배포용 설치 파일을 만드는 것
  = 2. 사용자 중심 진행, 소스 코드는 향후 관리 도모, 모듈화하여 패키징

- 2. 패키징 작업 순서
  = 1. 기능 식별
  = 2. 모듈화
  = 3. 빌드 진행
  = 4. 사용자 환경 분석
  = 5. 패키징 및 적용 시험
  = 6. 패키징 변경 개선
  = 7. 배포

- 3. 주요 배포용 파일 형식
  = 1. MSI -> Windows 용 패키지 형식
  = 2. dmg -> MacOS 용 패키지 형식
  = 3. jar -> java 응용 S/W, 라이브러리 배포하기 위한 패키지 형식
  = 4. war -> java Servlet, java Class, xml, WAS 제공하기 위한 패키지 형식
  = 5. ear -> jar + war, 하나의 애플리케이션 서비스 제공할 수 있는 패키지 형식
  = 6. apk -> Android 용 앱 패키지 형식
  = 7. ipa -> iOS 용 앱 패키지 형식


2. 소프트웨어 버전 등록
- 1. 소프트웨어 패키징의 형상 관리
  = 1. 개발 과정에서 S/W 의 변경 사항 관리하기 위해 개발된 일련의 활동
  = 2. S/W 개발 비용 줄이고, 개발 과정의 여러 방해 요인 최소화되도록 보증

- 2. 형상 관리 기능
  = 1. 형상 식별 - 형상 관리 대상에 이름 & 관리번호, 계층 구조, 수정 및 추적 용이
  = 2. 버전 제어 - 다른 버전의 형상 항목 관리, 특정 절차와 도구(Tool)를 결합
  = 3. 형상 통제 
    -> 1. 식별된 형상 항목, 변경요구 거모, 현재의 기준선 잘 반영
    -> 2. 기준선 => 정식으로 검토되고, 합의된 명세서나 제품

  = 4. 형상 감사
    -> 1. 기준선의 무결성 평가, 확인, 검증, 검열, 공식적으로 승인
    -> 2. 무결성 => 결점 없음, 정해진 기준 부합, 조건 충실히 만족하는 정도
 
  = 5. 형상 기록 -> 형상 식별, 통제, 감사 작업 결과 기록, 관리하고, 보고서 작성

- 3. 소프트웨어 버전 등록 주요 기능
  = 1. 저장소 (Repository) -> 최신 버전 파일들, 변경 내역에 대한 정보들이 저장
  = 2. 가져오기 (Import) -> 버전 관리 X, 아무것도 없는 저장소에 처음으로 파일 복사
  = 3. 체크아웃 (Checkout) -> 프로그램 수정, 저장소에서 파일 받기 (버전 관리 파일도)
  = 4. 체크인 (Check-in) -> 파일 수정, 저장소 파일을 새로운 버전으로 갱신
  = 5. 커밋 (Commit) -> 갱신된 내용 없는 충돌(Conflict), diff 도구, 수정 후 갱신
  = 6. 동기화 (Update) -> 저장소 최신 버전, 자신의 작업 공간 동기화

- 4.소프트웨어 버전 등록 과정
  = 가져오기 (Import), 인출 (Check-out), 동기화 (Update), 차이 (Diff)


3. 소프트웨어 버전 관리 도구
- 1. 공유 폴더 방식
  = 1. 버전 관리 자료가 지역 컴퓨터의 공유 폴더에 저장되어 관리 되는 방식
  = 2. SCSS, RCS, PVCS, QVCS, 파일 변경 사항 DB 에 기록

- 2. 클라이언트 / 서버 방식
  = 1. 버전 관리 자료가 서버에 저장되어 관리되는 방식
  = 2. CVS, SVN(Subversion), CVSNT, Clear Case, CMVC, Perforce
  = 3. 버전 관리 -> 서버에서 수행, 서버 문제 발생 시, 협업 및 버전 작업 관리 중단

- 3. 분산 저장소 방식
  = 1. 버전 관리 자료, 원격 저장소, 개발자 PC 지역 저장소에 함께 저장되어 관리
  = 2. Git, GNU Arch, DCVS, Bazaar, Mercurial, TeamWare, BitKeeper, Plastic SCM
  = 3. 지역 저장소 자료 이용하여 작업

- 4. Subversion (서브버전, SVN)
  = 1. CVS 개선, 200년 발표
  = 2. Client / Server 구조, Server(Repository) 에는 최신 버전 파일들과 변경사항 관리
  = 3. 오픈 소스, 무료 사용 가능
  = 4. 주요 명령어
    -> 1. add => 새로운 파일이나 디렉터리 버전 관리 대상으로 등록
    -> 2. commit => 클라이언트의 소스 파일 서버 파일에 적용
    -> 3. update => 최신 commit 이력 Client Source 파일에 적용
    -> 4. checkout => 버전 관리 정보와 Source 파일을 Server 에서 Client 로 받아옴
    -> 5. lock/unlock => Server Source 파일이나 디렉터리 잠그거나 해제
    -> 6. import => Server 저장소에 맨 처음 Source 파일 저장하는 명령, 일회성
    -> 7. export => 버전 관리에 대한 정보를 제외한 순수 소스 파일만을 서버에서 받아옴
    -> 8. info => 파일 위치, 마지막 수정 일자에 대한 정보 표시
    -> 9. diff => 지정된 파일이나 경로, 이전 리비전과의 차이 표시
    -> 10. merge => 작업된 버전 관리 내역, 기본 개발 작업과 병합

- 5. Git(깃)
  = 1. 리누스 토발스, 2005년 관리도구, 주니오 하마노
  = 2. 분산 버전 관리 시스템, 2개의 저장소, 지역 저장소와 원격 저장소
  = 3. 버전 관리 신속 처리, 원격 저장소나 네트워크 문제가 있어도 작업 가능
  = 4. 주요 명령어
    -> 1. add => Staging 영역에 작업 내용 추가
    -> 2. commit => 작업 내역 지역 저장소에 저장
    -> 3. branch => 최초 커밋시, master branch 생성, 새로운 branch 생성
    -> 4. checkout => 지정 branch 로 이동, HEAD 포인터
    -> 5. merge => 현재 HEAD 포인터가 가리키는 Branch 에 반영, 두 Branch 병합
    -> 6. init => 지역 저장소 생성
    -> 7. remote add => 원격 저장소 연결
    -> 8. push => Local 저장소 변경 내역 원격 저장소에 반영
    -> 9. fetch => 원격 저장소 변경 이력, 지역 저장소로 가져와 반영
    -> 10. clone => 원격 저장소 전체 내용, 지역 저장소로 복제
    -> 11. fork => 지정한 원격 저장소 내용, 자신의 원격 저장소로 복제


4. 빌드 자동화 도구
- 1. 빌드 자동화 도구
  = 1. 빌드 포함하여, 테스트 및 배포 자동화하는 도구
  = 2. 애자일, 지속적인 통합, 개발 환경에서 유용하게 활용
  = 3. Ant, Make, Maven, Gradle, Jenkins

- 2. Jenkins
  = 1. Java 기반 오픈 소스 형태로, Servlet 컨테이너에서 실행되는 서버 기반 도구
  = 2. SVN, Git, 가장 많이 사용되는 빌드 자동화 도구, Web GUI 제공

- 3. Gradle
  = 1. Groovy 기반으로 한 Open Source 형태의 자동화 도구
  = 2. Groovy 사용해서 만든 DSL (Domain Specific Language), 스크립트 언어 사용
