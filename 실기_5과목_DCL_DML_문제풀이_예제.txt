<Grant & Revoke & Commit & Rollback 예제>
GRANT ALL ON 학과 TO NAVI WITH GRANT OPTION;

GRANT DELETE ON 강좌 TO 김하늘 WITH GRANT OPTION;

REVOKE GRANT OPTION FOR SELECT, INSERT, DELETE ON 교수 FROM 임꺽정;

REVOKE GRANT OPTION FOR UPDATE ON 수강 FROM 임꺽정 CASCADE;

COMMIT -> 트랜잭션이 수행한 내용을 DB 에 반영하는 명령

ROLLBACK TO P1;


<Select & Insert & Update & Delete 예제>
DELETE FROM 학생 WHERE 이름 = '민수';

INSERT INTO 학생
(학번, 성명, 학년, 과목, 연락처)
VALUES
(98170823, '한국산', 3, '경엉학개론', '?-1234-1234');

DELETE FROM 학생 WHERE 이름 = 'Scott';

UPDATE 사원
SET 연봉 = 연봉 + 10000 AND 직급 = '차장';

UPDATE 학부생
SET 학과번호 = 999
WHERE 입학생수 >= 300;

insert, update, select, delete


<DML - SELECT 1>
SELECT 학번, 이름
FROM 학생
WHERE 학년 IN (3, 4);

200
3
1

SELECT * FROM PRODUCT
WHERE price IS NULL
ORDER BY ASC;

SELECT DISTINCT name
FROM Shop
WHERE id = (SELECT Shopid FROM Staff WHERE id = 10);

SELECT * FROM 회원 WHERE 이름 LIKE '이%' ORDER BY 가입일 DESC;

SELECT * FROM Sale where psale >= 10 AND psale <= 20;
(SELECT * FROM Sale where psale BETWEEN 10 AND 20);

SELECT DISTINCT 과목
FROM 학생
WHERE 학년 >= 3 AND WHERE 점수 >= 80;

SELECT 학번, 이름, 결제여부
FROM 학생정보, 결제, 신청정보
WHERE 학생정보.학번 = 신청정보.학번
AND 신청정보.신청번호 = 결제.신청정보
AND 신청과목 = 'OpenGL';

SELECT ID, NAME FROM CUSTOMER;
SELECT DISTINCT GRADE FROM CUSTOMER;
SELECT * FROM CUSTOMER ORDER BY DESC;
SELECT NAME FROM CUSTOMER WHERE AGE IS NULL;
SELECT NAME FROM CUSTOMER WHERE AGE IS NOT NULL;

SELECT 사원명 FROM 회사원 WHERE 연락번호 IS NOT NULL;


<DML - SELECT 2>
SELECT 학과, COUNT(*) AS 학과별튜플수
FROM 학생
GROUP BY 학과

SELECT 과목이름, MIN(점수) AS 최소점수, MAX(점수) AS 최대점수
FROM 성적
GROUP BY 과목이름
HAVING COUNT(점수) >= 90;

SELECT 이름, 전공, 신청과목
FROM 학생정보, 신청정보
WHERE 학생정보.학번 = 신청정보.학번
AND 신청과목 = "JAVA"
GROUP BY 이름, 전공, 신청과목
HAVING 전공 = '컴퓨터공학'

1

SELECT SUM(psale) from Sale
where pid IN (select id from Product where name like 'USB%');

SELECT 소속도시, AVG(매출액)
FROM 지점정보 WHERE 매출액 > 1000
GROUP BY 소속도시
HAVING COUNT(*) >= 3;

select 장학내역, 장학금,
ROW_NUMBER() OVER (PARTITION BY 장학내역 ORDER BY 장학금 DESC) AS NUM
FROM 장학금;

SELECT 학과, 장학내역, SUM(장학금) AS 장학금합계
FROM 장학금
GROUP BY ROLLUP(학과, 장학내역);


<JOIN>
join

-----
SELECT 학번, 이름, 학과코드, 컴퓨터
FROM 학생, 학과
WHERE 학생.학과코드 = 학과.학과코드

SELECT 학번, 이름, 학과코드, 컴퓨터
FROM 학생, 학과
WHERE 학생.학과코드 NATURAL JOIN 학과.학과코드

SELECT 학번, 이름, 학과코드, 컴퓨터
FROM 학생, 학과
WHERE 학생 JOIN 학과 USING (학과코드);
-----

SELECT a.코드, 이름, 동아리명 FROM 사원 a LEFT OUTER JOIN
동아리 B LEFT OUTER JOIN a.코드 = b.동아리 b
ON a.코드 = b.코드

